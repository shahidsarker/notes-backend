{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","notesToShow","filter","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","e","preventDefault","noteObject","Date","Math","random","err","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"6NAYeA,G,MAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,M,gBCiB3B,EArBA,WACb,IAAMK,EAAUC,IAAMC,IAHR,cAIRC,EAAc,CAClBC,GAAI,IACJN,QAAS,mCACTO,KAAM,2BACNT,WAAW,GAEb,OAAOI,EAAQM,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAKC,OAAON,OAa1C,EAVA,SAACO,GAEd,OADgBT,IAAMU,KAdR,aAcsBD,GACrBJ,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQ9B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAnBF,aAmBE,YAAwBR,GAAMM,GAC/BJ,MAAK,SAACC,GAAD,OAAcA,EAASC,SCX9BK,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAGF,yBAAKjB,UAAU,SAASiB,ICC3BC,EAAS,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,sFA4FSC,EAvFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,0BAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAAqBzB,MAAK,SAAC0B,GACzBC,QAAQC,IAAI,qBACZX,EAASS,QAEV,IAEH,IA0CMG,EAAcT,EAChBJ,EACAA,EAAMc,QAAO,SAAC3C,GAAD,OAA6B,IAAnBA,EAAKG,aAEhC,OACE,6BACE,qCACA,kBAAC,EAAD,CAAckB,QAASc,IACvB,6BACE,4BAAQ7B,QAAS,kBAAM4B,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAIlC,4BACGS,EAAYE,KAAI,SAAC5C,GAAD,OACf,kBAAC,EAAD,CACE6C,IAAK7C,EAAKW,GACVX,KAAMA,EACNC,iBAAkB,kBA7DD,SAACU,GAC1B,IAAMX,EAAO6B,EAAMiB,MAAK,SAACC,GAAD,OAAOA,EAAEpC,KAAOA,KAClCqC,EAAW,eAAQhD,EAAR,CAAcG,WAAYH,EAAKG,YAEhDmC,EACU3B,EAAIqC,GACXnC,MAAK,SAACoC,GACLnB,EAASD,EAAMe,KAAI,SAAC5C,GAAD,OAAWA,EAAKW,KAAOA,EAAKX,EAAOiD,SAEvDC,OAAM,SAACC,GACNf,EAAgB,SAAD,OACJpC,EAAKK,QADD,sCAGf+C,YAAW,WACThB,EAAgB,QACf,KACHN,EAASD,EAAMc,QAAO,SAACI,GAAD,OAAOA,EAAEpC,KAAOA,SA6CV0C,CAAmBrD,EAAKW,WAItD,0BAAM2C,SA7CM,SAACC,GACfA,EAAEC,iBAEF,IAAMC,EAAa,CACjBpD,QAAS0B,EACTnB,KAAM,IAAI8C,KACVvD,UAAWwD,KAAKC,SAAW,IAG7BtB,EACUmB,GACP5C,MAAK,SAACoC,GACLnB,EAASD,EAAMb,OAAOiC,IACtBjB,EAAW,OAEZkB,OAAM,SAACW,GAAD,OAASrB,QAAQC,IAAIoB,QA+B1B,2BAAOC,MAAO/B,EAASgC,SA5BJ,SAACR,GACxBvB,EAAWuB,EAAES,OAAOF,UA4BhB,4BAAQG,KAAK,UAAb,SAEF,kBAAC,EAAD,QCrGNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f541b0f4.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from \"axios\";\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  const nonExisting = {\n    id: 10000,\n    content: \"This note is not saved to server\",\n    date: \"2019-05-30T17:30:31.098Z\",\n    important: true,\n  };\n  return request.then((response) => response.data.concat(nonExisting));\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nexport default {\n  getAll,\n  create,\n  update,\n};\n","import React from \"react\";\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className=\"error\">{message}</div>;\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./index.css\";\n\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\nimport Notification from \"./components/Notification\";\n\nconst Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n  };\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app based on Dept of CS, Univ. of Helsinki 2020</em>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(\"some error happened...\");\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      console.log(\"promise fulfilled\");\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  const addNote = (e) => {\n    e.preventDefault();\n\n    const noteObject = {\n      content: newNote,\n      date: new Date(),\n      important: Math.random() > 0.5,\n    };\n\n    noteService\n      .create(noteObject)\n      .then((returnedNote) => {\n        setNotes(notes.concat(returnedNote));\n        setNewNote(\"\");\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const handleNoteChange = (e) => {\n    setNewNote(e.target.value);\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note) => note.important === true);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}